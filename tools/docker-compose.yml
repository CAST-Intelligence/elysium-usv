version: '3'
services:
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - "10000:10000"  # Blob Storage
      - "10001:10001"  # Queue Storage
      - "10002:10002"  # Table Storage
    environment:
      AZURITE_ACCOUNTS: "devstoreaccount1:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==:http://0.0.0.0:10000/devstoreaccount1"
      AZURITE_LOOSE_AUTH_MODE: "true"
    volumes:
      - azurite-data:/data
    command: "azurite --silent --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0 --location /data --debug /data/debug.log --loose --skipApiVersionCheck"

  minio:
    image: minio/minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Set up MinIO buckets during initialization
  minio-setup:
    image: minio/mc
    depends_on:
      - minio
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add minio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb minio/revelare-vessel-data;
      /usr/bin/mc policy set download minio/revelare-vessel-data;
      exit 0;
      "

  # FTP server for vessel data
  ftp-server:
    image: stilliard/pure-ftpd:latest
    ports:
      - "21:21"         # FTP control
      - "30000-30009:30000-30009"  # Passive port range
    environment:
      FTP_USER_NAME: ftpuser
      FTP_USER_PASS: ftppass
      FTP_USER_HOME: /home/ftpuser
      PUBLICHOST: localhost
      # Enable file creation notification via SITE CHMOD command
      ADDED_FLAGS: "--fsync=2 --chrooteveryone=true --passiveportrange=30000:30009 --sitechmod=true"
    volumes:
      - ftp-data:/home/ftpuser

  # FTP watcher service to monitor and process new files
  ftp-watcher:
    image: golang:1.21-alpine
    depends_on:
      - ftp-server
      - azurite
    volumes:
      - ftp-data:/ftp-data  # Mount FTP data
      - ${REPO_ROOT:-/Users/selwyn/cast/cast-dev/elysium-usv}:/app  # Mount the application
      - ftp-watch-data:/watch-data # For persistence
    environment:
      AZURE_STORAGE_CONNECTION_STRING: "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;"
      WATCH_DIR: "/ftp-data"
      BLOB_CONTAINER_NAME: "usvdata"
      VALIDATION_QUEUE_NAME: "validation-queue"
    entrypoint: >
      /bin/sh -c "
        apk add --no-cache inotify-tools bash;
        mkdir -p /watch-data;
        touch /watch-data/processed_files.log;
        echo 'Starting FTP watcher...';
        while true; do
          sleep 10;
          find /ftp-data -type f -name '*.md5' | while read md5_file; do
            data_file=\"\${md5_file%.md5}\";
            if [ -f \"\$data_file\" ] && ! grep -q \"\$md5_file\" /watch-data/processed_files.log; then
              echo \"Processing \$data_file with checksum \$md5_file\";
              md5sum_val=\$(cat \"\$md5_file\" | awk '{print \$1}');
              vessel_id=\$(basename \"\$data_file\" | cut -d'_' -f3 | cut -d'-' -f2);
              filename=\$(basename \"\$data_file\");
              echo \"Uploading to Azure with MD5: \$md5sum_val, VesselID: \$vessel_id\";
              
              # Upload to Azure Blob Storage with checksum metadata
              az storage blob upload \\
                --container-name usvdata \\
                --file \"\$data_file\" \\
                --name \"VESSEL\$vessel_id/\$filename\" \\
                --connection-string \"\$AZURE_STORAGE_CONNECTION_STRING\" \\
                --metadata checksum=\"\$md5sum_val\" vesselid=\"VESSEL\$vessel_id\" checksumAlgorithm=\"MD5\";
                
              # Add message to validation queue
              az storage message put \\
                --queue-name validation-queue \\
                --content \"VESSEL\$vessel_id/\$filename\" \\
                --connection-string \"\$AZURE_STORAGE_CONNECTION_STRING\";
                
              # Mark as processed
              echo \"\$md5_file\" >> /watch-data/processed_files.log;
            fi;
          done;
        done;
      "

volumes:
  azurite-data:
  minio-data:
  ftp-data:
  ftp-watch-data: